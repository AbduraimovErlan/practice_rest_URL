.get()
.post()
.list()
.create()
.as_view()

from django.contrib.auth.models import User
from django.shortcuts import get_object_or_404
from myapps.serializers import UserSerializer
from rest_framework import viewsets
from rest_framework.response import Response



class UserViewSet(viewsets.ViewSet):
"""
A simple ViewSet for listing or retrieving users.
"""
def list(self, request):
    queryset = User.objects.all()
    serializer = UserSerializer(queryset, many=True)
    return Response(serializer.data)

def retrieve(self, request, pk=None):
    queryset = User.objects.all()
    user = get_object_or_404(queryset, pk=pk)
    serializer = UserSerializer(user)
    return Response(serializer.data)



user_list = UserViewSet.as_view({'get': 'list'})
user_detail = UserViewSet.as_view({'get': 'retrieve'})


from myapp.views import UserViewSet
from rest_framework.routers import DefaultRouter


router = DefaultRouter()
router.register(r'users', UserViewSet, base_name='user')
urlpatterns = router.urls


class UserViewSet(viewsets.ModelViewSet):
"""
A viewset for viewing and editing user instances.
"""
serializer_class = UserSerializer
queryset = User.objects.all()



class UserViewSet(viewsets.ViewSet):
"""
Example empty viewset demonstrating the standard actions
that will be handled by a router class.

if you're using format suffixes, make sure to also include the 'format=None'
keyword argument for each action

def list(self, request):
pass

def create(self, request):
pass

def retrieve(self, request, pk=None):
pass

def update(self, request, pk=None):
pass

def partial_update(self, request, pk=None):
pass

def destroy(self, request, pk=None)
pass




from django.contrib.auth.models import User
from rest_framework import status
from rest_framework import viewsets
from rest_framework.decorators import detail_route, list_route
from rest_framework.response import Response
from myapp.serializers import UserSerializer, PasswordSerializer


class UserViewSet(viewsets.ModelViewSet):
    """
    A viewset that provides the standart actions
    """
    queryset = User.objects.all()
    serializer_class = UserSerializer

    @detail_route(methods['post'])
    def set_password(self, request, pk=None):
        user = self.get_object()
        serializer = PasswordSerializer(data=request.data)
        if serializer.is_valid():
            user.set_password(serializer.data['password']
            user.save()
            return Response({'status': 'password set'})
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST


    @list_route()
    def recent_users(self, request):
    recent_users = User.objects.all().order('-last_login')

    page = self.paginate_queryset(recent_users)
    if page is not None:
        serializer = self.get_serializer(page, many=True)
        return self.get_paginated_response(serializer.data)

    serializer = self.get_serializer(recent_users, many=True)
    return Response(serializer.data)


    @detail_route(methods=['post'], permission_classes=[IsAdminOrISelf])
    def ser_password(self, request, pk=None):


    @detail_route(methods=['post', 'delete'])
    def unset_password(self, request, pk=None):



class AccountViewSet(viewsets.ModelSet):
"""
A simple ViewSet for viewing and editing accounts.
"""
queryset = Account.objects.all()
serializer_class = AccountSerializer
permission_classes = [IsAccountAdminOrReadOnly]


class AccountViewSet(viewsets.ModelViewSet):
serializer_class = AccountSerializer
permission_class = [IsAccountAdminOrReadOnly]

def get_queryset(self):
return self.request.user.accounts.all()


class AccountViewSet(viewsets.ReadOnlyModelViewSet):
queryset = Account.objects.all()
serializer_class = AccountSerializer

from rest_framework import mixins
class CreateListRetrieveViewSet(mixins.CreateModelMixin,
                                mixins.ListModelMixin,
                                mixins.RetrieveModelMixin,
                                viewsets.GenericViewSet):
